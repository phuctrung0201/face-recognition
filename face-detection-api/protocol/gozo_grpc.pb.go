// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: gozo.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SiameseClient is the client API for Siamese service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiameseClient interface {
	// Sends a greeting
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error)
	StoreFace(ctx context.Context, in *StoreFaceRequest, opts ...grpc.CallOption) (*StoreFaceReply, error)
}

type siameseClient struct {
	cc grpc.ClientConnInterface
}

func NewSiameseClient(cc grpc.ClientConnInterface) SiameseClient {
	return &siameseClient{cc}
}

func (c *siameseClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictReply, error) {
	out := new(PredictReply)
	err := c.cc.Invoke(ctx, "/Siamese/Predict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siameseClient) StoreFace(ctx context.Context, in *StoreFaceRequest, opts ...grpc.CallOption) (*StoreFaceReply, error) {
	out := new(StoreFaceReply)
	err := c.cc.Invoke(ctx, "/Siamese/StoreFace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiameseServer is the server API for Siamese service.
// All implementations must embed UnimplementedSiameseServer
// for forward compatibility
type SiameseServer interface {
	// Sends a greeting
	Predict(context.Context, *PredictRequest) (*PredictReply, error)
	StoreFace(context.Context, *StoreFaceRequest) (*StoreFaceReply, error)
	mustEmbedUnimplementedSiameseServer()
}

// UnimplementedSiameseServer must be embedded to have forward compatible implementations.
type UnimplementedSiameseServer struct {
}

func (UnimplementedSiameseServer) Predict(context.Context, *PredictRequest) (*PredictReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedSiameseServer) StoreFace(context.Context, *StoreFaceRequest) (*StoreFaceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFace not implemented")
}
func (UnimplementedSiameseServer) mustEmbedUnimplementedSiameseServer() {}

// UnsafeSiameseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiameseServer will
// result in compilation errors.
type UnsafeSiameseServer interface {
	mustEmbedUnimplementedSiameseServer()
}

func RegisterSiameseServer(s grpc.ServiceRegistrar, srv SiameseServer) {
	s.RegisterService(&Siamese_ServiceDesc, srv)
}

func _Siamese_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiameseServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Siamese/Predict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiameseServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Siamese_StoreFace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreFaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiameseServer).StoreFace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Siamese/StoreFace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiameseServer).StoreFace(ctx, req.(*StoreFaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Siamese_ServiceDesc is the grpc.ServiceDesc for Siamese service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Siamese_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Siamese",
	HandlerType: (*SiameseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _Siamese_Predict_Handler,
		},
		{
			MethodName: "StoreFace",
			Handler:    _Siamese_StoreFace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gozo.proto",
}
